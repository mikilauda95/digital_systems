library ieee;
use ieee.std_logic_1164.all;

entity g1_count is
    port(clk: in  std_ulogic;
         a:   in  std_ulogic;
         res:   in  std_ulogic;
         s:   out std_ulogic);
end entity g1_count;

architecture arc of g1 is

    signal states: unsigned(4 downto 0) := "00000";
    signal s_local, res_shift: std_ulogic;
    signal shift_reg_s: std_ulogic_vector(30 downto 0);

begin

    s <= s_local;

    comb_reg: process(clk) --combinational and register process
    begin 
        if rising_edge(clk) then
            if res = '0' then
                res_shift <= '0';
            elsif a='1' and states=0 then 
                shift_reg_s(30) <= '1';
            elsif a='1' and states="11111" then
                --states <= "00001";
                shift_reg_s(30) <= '1';
            --elsif states /= "00000" then 
            --states <= states + 1;
            end if;
        end if;
    end process comb_reg;

    comb_out: process(shift_reg_s) --combinational process
    begin
        case shift_reg_s is 
            when "0000000000000000000000000000000" => 
                s_local <= '0';
            when "1000000000000000000000000000000" => 
                s_local <= '1';
            when "0000000000000000100000000000000" =>
                s_local <= not s_local;
            when "0000000000000000000000001000000" => 
                s_local <= not s_local;
            when "0000000000000000000000000000100" => 
                s_local <= not s_local;
            when "0000000000000000000000000000001" => 
                s_local <= not s_local;
            when others => null;
        end case;
    end process comb_out;

    shift_pr: process (clk)
    begin
        for i in 30 downto 1 loop
            if res_shift = '0' then
                shift_reg_s <=  (others => '0');
            else
            shift_reg_s(i-1) <= shift_reg_s(i);
            end if;
            
        end loop;
    end process;

end architecture arc;

